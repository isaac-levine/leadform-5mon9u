name: Release & Deploy

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (vX.Y.Z)'
        required: true
        type: string
      dry_run:
        description: 'Perform dry run deployment'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '20.x'
  TERRAFORM_VERSION: '1.5.x'
  AWS_REGION: ${{ secrets.AWS_REGION }}
  DOCKER_REGISTRY: ghcr.io
  KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}

jobs:
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Validate version format
        run: |
          VERSION=${{ github.event.inputs.version || github.ref_name }}
          if ! [[ $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format. Must be vX.Y.Z"
            exit 1
          fi

      - name: Verify required approvals
        run: |
          APPROVALS=$(gh api \
            repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews \
            --jq 'length')
          if [ "$APPROVALS" -lt 2 ]; then
            echo "At least 2 approvals required"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check security scan status
        uses: ./.github/workflows/security.yml@main
        with:
          security-scan: true

      - name: Verify CI pipeline status
        run: |
          gh api \
            repos/${{ github.repository }}/commits/${{ github.sha }}/check-runs \
            --jq '.check_runs[] | select(.name == "build") | .conclusion' | \
            grep -q "success"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: Create Release
    needs: prepare
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^)
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          git log --pretty=format:'- %s (%h)' $PREVIOUS_TAG..HEAD >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version || github.ref_name }}
          release_name: Release ${{ github.event.inputs.version || github.ref_name }}
          body: ${{ env.CHANGELOG }}
          draft: false
          prerelease: false

      - name: Notify stakeholders
        if: success()
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "New release ${{ github.event.inputs.version || github.ref_name }} created successfully"
            }'

  deploy-infrastructure:
    name: Deploy Infrastructure
    needs: release
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: ${{ !github.event.inputs.dry_run }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Initialize Terraform
        run: |
          cd infrastructure/terraform/aws
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Validate Terraform configuration
        run: |
          cd infrastructure/terraform/aws
          terraform validate

      - name: Plan infrastructure changes
        run: |
          cd infrastructure/terraform/aws
          terraform plan -out=tfplan

      - name: Apply infrastructure updates
        run: |
          cd infrastructure/terraform/aws
          terraform apply -auto-approve tfplan

  deploy-services:
    name: Deploy Services
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: ${{ !github.event.inputs.dry_run }}

    steps:
      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Set Kubernetes context
        run: |
          echo "${{ env.KUBE_CONFIG }}" > kubeconfig
          export KUBECONFIG=./kubeconfig

      - name: Update service versions
        run: |
          VERSION=${{ github.event.inputs.version || github.ref_name }}
          for service in ai analytics form sms gateway; do
            kubectl set image deployment/$service \
              $service=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/backend-$service:$VERSION
          done

      - name: Monitor rollout status
        run: |
          for service in ai analytics form sms gateway; do
            kubectl rollout status deployment/$service --timeout=300s
          done

      - name: Verify service health
        run: |
          for service in ai analytics form sms gateway; do
            kubectl exec deploy/$service -- curl -f http://localhost:3000/health
          done

      - name: Configure monitoring
        run: |
          kubectl apply -f infrastructure/kubernetes/monitoring/
          kubectl rollout status deployment/prometheus
          kubectl rollout status deployment/grafana

      - name: Update metrics and alerts
        run: |
          kubectl apply -f infrastructure/kubernetes/monitoring/rules/
          kubectl apply -f infrastructure/kubernetes/monitoring/alerts/

      - name: Generate deployment report
        if: always()
        run: |
          echo "Deployment Report" > deployment-report.txt
          echo "Version: ${{ github.event.inputs.version || github.ref_name }}" >> deployment-report.txt
          echo "Status: ${{ job.status }}" >> deployment-report.txt
          kubectl get pods -o wide >> deployment-report.txt

      - name: Upload deployment report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: deployment-report
          path: deployment-report.txt
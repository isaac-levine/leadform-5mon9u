name: Backend CI

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/backend/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/backend/**'

env:
  DOCKER_REGISTRY: ghcr.io
  NODE_VERSION: '20.x'
  PYTHON_VERSION: '3.11'
  TEST_COVERAGE_THRESHOLD: 80
  MAX_CONCURRENT_JOBS: 4

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test & Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: '**/requirements.txt'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.cache/pip
            node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json', '**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install Node.js dependencies
        run: |
          npm ci
          npm run bootstrap
        working-directory: src/backend

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
        working-directory: src/backend/services/ai

      - name: Run linting
        run: npm run lint
        working-directory: src/backend

      - name: Run unit tests
        run: npm run test
        working-directory: src/backend
        env:
          CI: true
          NODE_ENV: test

      - name: Run integration tests
        run: npm run test:e2e
        working-directory: src/backend
        env:
          CI: true
          NODE_ENV: test

      - name: Check test coverage
        run: |
          npm run test:coverage
          coverage=$(jq -r '.total.lines.pct' coverage/coverage-summary.json)
          if (( $(echo "$coverage < $TEST_COVERAGE_THRESHOLD" | bc -l) )); then
            echo "Test coverage ($coverage%) is below threshold ($TEST_COVERAGE_THRESHOLD%)"
            exit 1
          fi
        working-directory: src/backend

      - name: Run security scan
        uses: snyk/actions/node@v3
        with:
          args: --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./src/backend/coverage/coverage-final.json
          flags: backend
          fail_ci_if_error: true

  build:
    name: Build & Push Container
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        service: [ai, analytics, form, sms, gateway]
      max-parallel: ${{ env.MAX_CONCURRENT_JOBS }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: --debug

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/backend-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=long

      - name: Build and push container
        uses: docker/build-push-action@v4
        with:
          context: ./src/backend/services/${{ matrix.service }}
          file: ./src/backend/services/${{ matrix.service }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ github.workflow }}-${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ github.workflow }}-${{ matrix.service }}
          build-args: |
            NODE_VERSION=${{ env.NODE_VERSION }}
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Verify container health
        if: github.event_name != 'pull_request'
        run: |
          docker pull ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          docker run -d --name test-${{ matrix.service }} ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          sleep 10
          docker inspect test-${{ matrix.service }} | jq '.[0].State.Health.Status' | grep -q '"healthy"'
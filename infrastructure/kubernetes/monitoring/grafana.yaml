# Grafana Kubernetes Deployment Manifest v9.5.3
# Purpose: Production-grade Grafana deployment with HA, security, persistence and auto-provisioning
apiVersion: v1
kind: List
items:
  # ServiceAccount for Grafana with minimal permissions
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: grafana
      namespace: monitoring
      labels:
        app: grafana
        component: monitoring
        app.kubernetes.io/name: grafana
        app.kubernetes.io/part-of: monitoring-stack
        app.kubernetes.io/version: "9.5.3"

  # ConfigMap for Grafana Datasources
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: grafana-datasources
      namespace: monitoring
      labels:
        app: grafana
    data:
      datasources.yaml: |
        apiVersion: 1
        datasources:
          - name: Prometheus
            type: prometheus
            access: proxy
            url: http://prometheus:9090
            isDefault: true
            version: 1
            editable: false
            jsonData:
              timeInterval: "15s"
              queryTimeout: "30s"
              httpMethod: "POST"

  # ConfigMap for Grafana Dashboards
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: grafana-dashboards
      namespace: monitoring
      labels:
        app: grafana
    data:
      dashboards.yaml: |
        apiVersion: 1
        providers:
          - name: 'default'
            orgId: 1
            folder: ''
            type: file
            disableDeletion: true
            editable: false
            options:
              path: /var/lib/grafana/dashboards
              foldersFromFilesStructure: true

  # PersistentVolumeClaim for Grafana Storage
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: grafana-storage
      namespace: monitoring
      labels:
        app: grafana
    spec:
      accessModes:
        - ReadWriteOnce
      storageClassName: gp2
      resources:
        requests:
          storage: 10Gi

  # Deployment for Grafana with HA configuration
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: grafana
      namespace: monitoring
      labels:
        app: grafana
        component: monitoring
    spec:
      replicas: 2
      selector:
        matchLabels:
          app: grafana
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxSurge: 1
          maxUnavailable: 1
      template:
        metadata:
          labels:
            app: grafana
          annotations:
            prometheus.io/scrape: "true"
            prometheus.io/port: "3000"
        spec:
          serviceAccountName: grafana
          securityContext:
            fsGroup: 472
            runAsUser: 472
            runAsNonRoot: true
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: app
                        operator: In
                        values:
                          - grafana
                  topologyKey: kubernetes.io/hostname
          containers:
            - name: grafana
              image: grafana/grafana:9.5.3
              imagePullPolicy: IfNotPresent
              ports:
                - name: http
                  containerPort: 3000
                  protocol: TCP
              env:
                - name: GF_SECURITY_ADMIN_USER
                  valueFrom:
                    secretKeyRef:
                      name: grafana-credentials
                      key: admin-user
                - name: GF_SECURITY_ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: grafana-credentials
                      key: admin-password
                - name: GF_AUTH_ANONYMOUS_ENABLED
                  value: "false"
                - name: GF_SECURITY_ALLOW_EMBEDDING
                  value: "false"
              resources:
                requests:
                  cpu: 500m
                  memory: 512Mi
                limits:
                  cpu: 1000m
                  memory: 1Gi
              volumeMounts:
                - name: storage
                  mountPath: /var/lib/grafana
                - name: datasources
                  mountPath: /etc/grafana/provisioning/datasources
                  readOnly: true
                - name: dashboards-provisioning
                  mountPath: /etc/grafana/provisioning/dashboards
                  readOnly: true
                - name: dashboards
                  mountPath: /var/lib/grafana/dashboards
                  readOnly: true
              livenessProbe:
                httpGet:
                  path: /api/health
                  port: 3000
                initialDelaySeconds: 60
                timeoutSeconds: 30
                periodSeconds: 10
                failureThreshold: 3
              readinessProbe:
                httpGet:
                  path: /api/health
                  port: 3000
                initialDelaySeconds: 30
                timeoutSeconds: 30
                periodSeconds: 10
                failureThreshold: 3
          volumes:
            - name: storage
              persistentVolumeClaim:
                claimName: grafana-storage
            - name: datasources
              configMap:
                name: grafana-datasources
            - name: dashboards-provisioning
              configMap:
                name: grafana-dashboards
            - name: dashboards
              configMap:
                name: grafana-dashboards-json

  # Service for Grafana
  - apiVersion: v1
    kind: Service
    metadata:
      name: grafana
      namespace: monitoring
      labels:
        app: grafana
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
    spec:
      ports:
        - port: 3000
          targetPort: 3000
          protocol: TCP
          name: http
      selector:
        app: grafana
      type: ClusterIP
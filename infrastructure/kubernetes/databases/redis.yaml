# Redis Cache Cluster Deployment for AI-SMS Lead Platform
# Version: 1.0.0
# Dependencies:
# - redis:7.0-alpine
# - kubernetes v1.27
# - high-iops-ssd StorageClass
# - app namespace

---
# Redis ConfigMap for configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: app
  labels:
    app: redis
    component: cache
data:
  redis.conf: |
    maxmemory 3gb
    maxmemory-policy allkeys-lru
    appendonly yes
    appendfsync everysec
    save 900 1
    save 300 10
    save 60 10000
    timeout 0
    tcp-keepalive 300
    databases 16
    replica-serve-stale-data yes
    replica-read-only yes
    protected-mode yes
    requirepass ${REDIS_PASSWORD}
    masterauth ${REDIS_PASSWORD}

---
# Redis StatefulSet for high availability deployment
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: app
  labels:
    app: redis
    component: cache
    tier: data
    environment: production
spec:
  replicas: 3
  serviceName: redis
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        security.platform.io/encryption: required
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
        runAsNonRoot: true
      containers:
        - name: redis
          image: redis:7.0-alpine
          command: ["redis-server"]
          args: ["/usr/local/etc/redis/redis.conf"]
          ports:
            - containerPort: 6379
              name: redis
            - containerPort: 9121
              name: metrics
          resources:
            requests:
              cpu: "500m"
              memory: "1Gi"
            limits:
              cpu: "2"
              memory: "4Gi"
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-secret
                  key: password
          volumeMounts:
            - name: redis-data
              mountPath: /data
            - name: redis-config
              mountPath: /usr/local/etc/redis
          livenessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - redis-cli
                - -a
                - $(REDIS_PASSWORD)
                - ping
            initialDelaySeconds: 5
            periodSeconds: 5
        - name: redis-exporter
          image: oliver006/redis_exporter:v1.44.0
          ports:
            - containerPort: 9121
              name: metrics
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "200m"
              memory: "256Mi"
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-secret
                  key: password
      volumes:
        - name: redis-config
          configMap:
            name: redis-config
  volumeClaimTemplates:
    - metadata:
        name: redis-data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: high-iops-ssd
        resources:
          requests:
            storage: 20Gi

---
# Headless service for StatefulSet DNS records
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: app
  labels:
    app: redis
    component: cache
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-internal: "true"
spec:
  ports:
    - port: 6379
      targetPort: 6379
      name: redis
    - port: 9121
      targetPort: 9121
      name: metrics
  selector:
    app: redis
  clusterIP: None

---
# Network Policy for Redis access control
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis-network-policy
  namespace: app
spec:
  podSelector:
    matchLabels:
      app: redis
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              redis-access: "true"
      ports:
        - port: 6379
        - port: 9121
  egress:
    - to:
        - podSelector:
            matchLabels:
              app: redis
      ports:
        - port: 6379
    - to:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - port: 9121